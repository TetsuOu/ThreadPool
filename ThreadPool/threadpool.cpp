#include "threadpool.h"

#include<thread>
#include<functional>
#include<iostream>
const int TASK_MAX_THRESHHOLD = 1024;
const int THREAD_MAX_THRESHHOLD = 10;
const int THREAD_MAX_IDLE_TIME = 10;

//线程池构造
ThreadPool::ThreadPool()
	: initThreadSize_(0)
	, taskSize_(0)
	, idleThreadSize_(0)
	, curThreadSize_(0)
	, taskQueMaxThreshHold_(TASK_MAX_THRESHHOLD)
	, threadSizeThreshHold_(THREAD_MAX_THRESHHOLD)
	, poolMode_(PoolMode::MODE_FIXED)
	, isPoolRunning_(false)
{}

//线程池析构
ThreadPool::~ThreadPool() {
	isPoolRunning_ = false;


	//等待线程池里面所有的线程返回
	// 两种状态： 阻塞  正在执行任务中
	//其实还有第3种 中间
	std::unique_lock<std::mutex> lock(taskQueMtx_);
	notEmpty_.notify_all();
	exitCond_.wait(lock, [&]()->bool {
		return threads_.size() == 0;
		});
	std::cout << "All finished!\n";
}

//设置线程池的工作模式
void ThreadPool::setMode(PoolMode mode) {
	if (checkRunningState())
		return;
	poolMode_ = mode;
}

//设置初始的线程数量
void ThreadPool::setInitThreadSize(int size) {
	if (checkRunningState())
		return;
	initThreadSize_ = size;
}

//设置task任务队列上限阈值
void ThreadPool::setTaskQueMaxThreshHold(int threshhold) {
	if (checkRunningState())
		return;
	taskQueMaxThreshHold_ = threshhold;
}

void ThreadPool::setThreadSizeThreshHold(int threshhold) {
	if (checkRunningState())
		return;
	if (poolMode_ == PoolMode::MODE_CACHED) {
		threadSizeThreshHold_ = threshhold;
	}
}

//给线程池提交任务 
Result ThreadPool::submitTask(std::shared_ptr<Task> sp) {
	//获取锁
	std::unique_lock<std::mutex> lock(taskQueMtx_);
	//线程的通信 等待任务队列有空余 wait wait_for wait_unitl
	/*while (taskQue_.size() == taskQueMaxThreshHold_) {
		notFull_.wait(lock);
	}*/

	//只要条件满足就返回；
	/*notFull_.wait(lock, [&]()->bool
		{return taskQue_.size() < taskQueMaxThreshHold_; });*/

		//用户提交任务，最长不能阻塞超过1s，否则判断提交任务失败
	if (!notFull_.wait_for(lock, std::chrono::seconds(1), [&]()->bool
		{return taskQue_.size() < taskQueMaxThreshHold_; })) {
		//表示notFull_等待1s，条件依然没有满足
		std::cerr << "task queue is full, submit task fail." << std::endl;
		return Result(sp, false);
	}


	//如果有空余，把任务放入任务队列中
	taskQue_.emplace(sp);
	taskSize_++;

	//因为新放了任务，任务队列肯定不空了，在notEmpty_上进行通知，赶快分配线程执行任务

	notEmpty_.notify_all();

	//cached模式 需要根据任务数量和空闲线程的数量，判断是否需要创建新的线程出来
	if (poolMode_ == PoolMode::MODE_CACHED
		&& taskSize_ > idleThreadSize_
		&& curThreadSize_ < threadSizeThreshHold_) {
		//创建新线程
		/*auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this));
		threads_.emplace_back(std::move(ptr));
		curThreadSize_++;*/
		std::cout << ">>> create new thread ..." << std::endl;
		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
		int threadId = ptr->getId();
		threads_.emplace(threadId, std::move(ptr));
		threads_[threadId]->start();//启动线程
		//修改线程个数相关的数量
		curThreadSize_++;
		idleThreadSize_++;
	}


	//返回任务的Result对象

	return Result(sp, true);
}

//开启线程池
void ThreadPool::start(int initThreadSize) {
	isPoolRunning_ = true;
	initThreadSize_ = initThreadSize;
	curThreadSize_ = initThreadSize;

	//创建线程对象
	for (int i = 0; i < initThreadSize_; i++) {
		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
		// threads_.emplace_back(std::move(ptr));
		int threadId = ptr->getId();
		threads_.emplace(threadId, std::move(ptr));
	}

	//启动所有线程
	for (int i = 0; i < initThreadSize_; i++) {
		threads_[i]->start(); //
		idleThreadSize_++; //记录初始空闲线程数量
	}
}

//定义线程函数  线程池的所有线程从任务队列里面消费任务
void ThreadPool::threadFunc(int threadid) { //线程函数返回，对应的线程结束
	auto lastTime = std::chrono::high_resolution_clock().now();
	while (true) {
		std::shared_ptr<Task> task;
		{
			//先获取锁
			std::unique_lock<std::mutex> lock(taskQueMtx_);
			std::cout << "tid: " << std::this_thread::get_id() << " 尝试获取任务...\n";

			//锁+双重判断
			while (taskQue_.size() == 0) {
				//线程池要结束，回收线程资源
				if (!isPoolRunning_) {
					threads_.erase(threadid);
					std::cout << "threadid: " << std::this_thread::get_id() << " exit\n";
					exitCond_.notify_all();
					return;//线程函数结束 ，线程结束
				}

				if (poolMode_ == PoolMode::MODE_CACHED) {
					if (std::cv_status::timeout ==
						notEmpty_.wait_for(lock, std::chrono::seconds(1))
						) {
						auto now = std::chrono::high_resolution_clock().now();
						auto dur = std::chrono::duration_cast<std::chrono::seconds>(now - lastTime);
						if (dur.count() >= THREAD_MAX_IDLE_TIME
							&& curThreadSize_ > initThreadSize_) {
							threads_.erase(threadid);
							curThreadSize_--;
							idleThreadSize_--;
							std::cout << "threadid: " << std::this_thread::get_id() << " exit\n";
							return;
						}
					}
				}
				else {
					notEmpty_.wait(lock);
				}
			}

			idleThreadSize_--;
			std::cout << "tid: " << std::this_thread::get_id() << " 获取任务成功...\n";

			//如果不空，从任务队列中取一个任务出来
			task = taskQue_.front();
			taskQue_.pop();
			taskSize_--;

			//如果依然有剩余任务，继续通知其他的线程执行任务
			if (taskQue_.size() > 0) {
				notEmpty_.notify_all();
			}

			//取出一个任务，得进行通知，通知可以继续提交生产任务
			notFull_.notify_all();

		}//就应该把锁释放掉
		std::cout << "tid: " << std::this_thread::get_id() << " begin !\n";
		//当前线程负责执行这个任务
		if (task != nullptr) {
			// task->run(); //执行任务；把任务的返回值setVal给到Result
			task->exec();
		}
		std::cout << "tid: " << std::this_thread::get_id() << " end !\n";
		idleThreadSize_++;
		//更新线程执行完任务的时间
		lastTime = std::chrono::high_resolution_clock().now();
	}

	
}

bool ThreadPool::checkRunningState() const {
	return isPoolRunning_;
}

//线程方法实现
int Thread::generateId_ = 0;

//线程构造
Thread::Thread(ThreadFunc func)
	: func_(func)
	, threadId_(generateId_++) {

}
//线程析构
Thread::~Thread() {

}

//启动线程
void Thread::start() {
	//创建一个线程来执行一个线程函数
	std::thread t(func_, threadId_); //对c++11来说， 线程对象t和线程函数func_
	t.detach(); //设置分离线程 
}

int Thread::getId() const {
	return threadId_;
}


//Task 方法实现
Task::Task()
	: result_(nullptr) {
}

void Task::exec() {
	if (result_ != nullptr) {
		// run(); //这里发生多态调用
		result_->setVal(run());
	}
}

void Task::setResult(Result* res) {
	result_ = res;
}

// Result 方法实现
Result::Result(std::shared_ptr<Task> task, bool isValid)
	: isValid_(isValid)
	, task_(task) {
	task_->setResult(this);
}

Any Result::get() { //用户调用
	if (!isValid_) {
		return "";
	}
	sem_.wait(); //task任务如果没有执行完，这里会阻塞用户的线程
	return std::move(any_);
}

void Result::setVal(Any any) { //
	//存储task的返回值
	this->any_ = std::move(any);
	sem_.post();//已经获取了任务的返回值，增加信号量资源
}